from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandObject, CommandStart

from keyboards import reply, builders

from motor.core import AgnosticDatabase as MDB

router = Router()


@router.message(Command("menu"))
@router.callback_query(F.data == "menu")
async def cmd_menu(message: Message | CallbackQuery):
    pattern = dict(
        text="–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
        reply_markup=builders.inline_builder(
            ["–ú–æ–∏ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", "–ú–æ–π user_id", "–ö–æ–Ω—Ç–∞–∫—Ç—ã", "–ü–æ–º–æ—â—å"],
            ["devices", "user_id", "contacts", "help"],
            [1, 1, 1])
    )
    if isinstance(message, CallbackQuery):
        await message.message.edit_text(**pattern)
        await message.answer()  # let bot know that callback was handled
    else:
        await message.answer(**pattern)


# callback for main menu
@router.callback_query(F.data == "contacts")
async def cmd_contacts(callback_query: CallbackQuery):
    await callback_query.message.edit_text(
        text="–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏: (–¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏):\n", reply_markup=builders.inline_builder(
            ["<< –ù–∞–∑–∞–¥"], ["menu"], [1]
        ))
    await callback_query.answer()


@router.callback_query(F.data == "help")
async def cmd_help(callback_query: CallbackQuery):
    await callback_query.message.edit_text(
        text="–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞: (–¥–æ–±–∞–≤–∏—Ç—å, —á—Ç–æ –Ω—É–∂–Ω–æ)\n", reply_markup=builders.inline_builder(
            ["<< –ù–∞–∑–∞–¥"], ["menu"], [1]
        )
    )
    await callback_query.answer()


@router.callback_query(F.data == "user_id")
async def cmd_user_id(callback_query: CallbackQuery):
    await callback_query.message.edit_text(
        text=f"–í–∞—à user_id: {callback_query.from_user.id}\n", reply_markup=builders.inline_builder(
            ["<< –ù–∞–∑–∞–¥"], ["menu"], [1]
        )
    )
    await callback_query.answer()


@router.message(CommandStart())
async def cmd_start(message: Message, db: MDB):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, —è –æ—Ñ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç InnoCook!. üëã\n"
                         f"–Ø —É–º–µ—é —É–ø—Ä–∞–≤–ª—è—Ç—å —Å—É–≤–∏–¥–∞–º–∏ InnoCook –ø–æ—Å–ª–µ–Ω–∏—Ö —Ä–µ–≤–∏–∑–∏–π. ü§ñ\n"
                         f"–ù–∞—á–∏–Ω–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –º–æ–∂–Ω–æ –∑–¥–µ—Å—å: /rules")
    await cmd_menu(message)
    user_id = message.from_user.id
    user = await db.users.find_one({"_id": user_id})
    if user:
        return
    await db.users.insert_one({
        "_id": user_id,
        "devices": [],
        "presets": []
    })
    await message.answr()


@router.message(Command("user_id"))
async def cmd_user_id(message: Message):
    await message.answer(f"{message.from_user.id}")
